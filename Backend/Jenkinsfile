pipeline {
    agent any

    environment {
        DB_URL = 'jdbc:mysql://localhost:3306/devops'
        DB_USER = 'root'
        DB_PASSWORD = '' // Update with your actual password
        DOCKER_REGISTRY = 'aichanciri'
        DOCKER_IMAGE = 'devopsback'
    }

    stages {
        stage('Checkout') {
            steps {
                // Pull the code from the specified branch of your GitHub repository
                git branch: 'AichaNciri_5Arctic3_G4', 
                    url: 'https://github.com/devopsproject976/devops.git', 
                    credentialsId: 'dev' // Use the credentials ID you created
            }
        }

        stage('MySQL Setup') {
            steps {
                script {
                    // Remove existing container if it exists
                    sh 'docker rm -f mysql-test || true'
                    
                    // Start a new MySQL container
                    sh 'docker run -d --name mysql-test -e MYSQL_ALLOW_EMPTY_PASSWORD=true -e MYSQL_DATABASE=test_db -p 3306:3306 mysql:5.7'
                }
            }
        }

        stage('Build') {
            steps {
                // Change directory to Backend to run Maven commands
                dir('Backend') {
                    // Run Maven clean and package commands
                    sh 'mvn clean package'
                }
            }
        }

        stage('Test') {
            steps {
                dir('Backend') {
                    // Run tests with Maven (JUnit and Mockito included)
                    sh 'mvn test'
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    // Build Docker image using the Dockerfile
                    dir('Backend') {
                        sh "docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest ."
                    }
                }
            }
        }

        stage('Docker Push') {
            steps {
                script {
                    // Use Docker Hub credentials
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}'
                       sh 'docker push aichanciri/devopsback'
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up the MySQL container after the build
            sh 'docker rm -f mysql-test || true'
        }
        success {
            // Archive and display test results
            junit 'Backend/target/surefire-reports/*.xml'
            echo 'Build and tests succeeded!'
        }
        failure {
            echo 'Build or test failed.'
        }
    }
}
