pipeline {
    agent any
    parameters {
        string(name: 'SONARQUBE_URL', defaultValue: 'http://localhost:9000', description: 'SonarQube URL')
    }

    environment {
        DB_URL = 'jdbc:mysql://localhost:3306/devops'
        DB_USER = 'root'
        DB_PASSWORD = '' // Update with your actual password
        DOCKER_REGISTRY = 'aichanciri'
        DOCKER_IMAGE = 'devopsback'
        SONAR_SCANNER_HOME = tool 'SonarQube Scanner'
        SONAR_PROJECT_KEY = 'devops-backend'
        SONAR_TOKEN = credentials('SonarQube_Token')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'AichaNciri_5Arctic3_G4',
                    url: 'https://github.com/devopsproject976/devops.git',
                    credentialsId: 'dev'
            }
        }

        stage('MySQL Setup') {
            steps {
                script {
                    sh 'docker rm -f mysql-test || true'
                    sh 'docker run -d --name mysql-test -e MYSQL_ALLOW_EMPTY_PASSWORD=true -e MYSQL_DATABASE=test_db -p 3306:3306 mysql:5.7'
                }
            }
        }

        stage('Build') {
            steps {
                dir('Backend') {
                    sh 'mvn clean package'
                }
            }
        }

        stage('Test') {
            steps {
                dir('Backend') {
                    sh 'mvn test'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    dir('Backend') {
                        withSonarQubeEnv('SonarQube Scanner') {
                            sh '''
                                ${SONAR_SCANNER_HOME}/bin/sonar-scanner \
                                -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                                -Dsonar.sources=src \
                                -Dsonar.java.binaries=target/classes \
                                -Dsonar.host.url=${SONARQUBE_URL} \
                                -Dsonar.login=${SONAR_TOKEN}
                            '''
                        }
                    }
                }
            }
        }

        stage('Publish JaCoCo Report') {
            steps {
                publishCoverage(
                    adapters: [jacocoAdapter('**/target/site/jacoco/jacoco.xml')],
                    sourceDirectories: ['Backend/src/main/java']
                )
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    dir('Backend') {
                        sh "docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest ."
                    }
                }
            }
        }

        stage('Docker Push') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}'
                        sh 'docker push aichanciri/devopsback'
                    }
                }
            }
        }
    }

    post {
        always {
            sh 'docker rm -f mysql-test || true'
        }
        success {
            junit 'Backend/target/surefire-reports/*.xml'
            echo 'Build and tests succeeded!'
        }
        failure {
            echo 'Build or test failed.'
        }
    }
}
