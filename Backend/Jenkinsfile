pipeline {
    agent any
    parameters {
        string(name: 'NEXUS_URL', defaultValue: 'localhost:8081', description: 'Nexus URL')
        string(name: 'NEXUS_REPOSITORY', defaultValue: 'maven-releases', description: 'Nexus Repository Name')
        string(name: 'SONARQUBE_URL', defaultValue: 'http://localhost:9000', description: 'SonarQube URL')
    }

    environment {
        DB_URL = 'jdbc:mysql://localhost:3306/devops'
        DB_USER = 'root'
        DB_PASSWORD = '' // Update with your actual password
        DOCKER_REGISTRY = 'aichanciri'
        DOCKER_IMAGE = 'devopsback'
        SONAR_SCANNER_HOME = tool 'SonarQube Scanner'
        SONAR_PROJECT_KEY = 'devops-backend'
        SONAR_TOKEN = credentials('SonarQube_Token')
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_CREDENTIALS = credentials('nexus-credentials') // Use the same ID as created
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'AichaNciri_5Arctic3_G4',
                    url: 'https://github.com/devopsproject976/devops.git',
                    credentialsId: 'dev'
            }
        }

        stage('MySQL Setup') {
            steps {
                script {
                    sh 'docker rm -f mysql-test || true'
                    sh 'docker run -d --name mysql-test -e MYSQL_ALLOW_EMPTY_PASSWORD=true -e MYSQL_DATABASE=test_db -p 3306:3306 mysql:5.7'
                }
            }
        }

        stage('Build') {
            steps {
                dir('Backend') {
                    sh 'mvn clean package -X'
                }
            }
        }

        stage('Test') {
            steps {
                dir('Backend') {
                    sh 'mvn test'
                }
            }
        }



        stage('JaCoCo Report') {
                    steps {
                        dir('Backend') {
                            // Generate the JaCoCo report
                            sh 'mvn jacoco:report'
                        }
                    }
                }

                stage('SonarQube Analysis') {
                    steps {
                        script {
                            dir('Backend') {
                                withSonarQubeEnv('SonarQube Scanner') { // Ensure 'SonarQube' matches your configured server in Jenkins
                                    sh "${SONAR_SCANNER_HOME}/bin/sonar-scanner " +
                                        "-Dsonar.projectKey=${SONAR_PROJECT_KEY} " +
                                        "-Dsonar.sources=src " +
                                        "-Dsonar.java.binaries=target/classes " +
                                        "-Dsonar.host.url=http://localhost:9000 " + // Adjust URL
                                        "-Dsonar.login=${env.SONAR_TOKEN} " +
                                        "-Dsonar.jacoco.reportPaths=target/jacoco.exec" // Path to the JaCoCo execution data
                                }
                            }
                        }
                    }
                }
        stage('Publish to Nexus and Build Docker Image') {
                    parallel {
                        stage('Publish to Nexus') {
                            steps {
                                dir('Backend') {
                                    script {
                                        pom = readMavenPom file: "pom.xml"
                                        filesByGlob = findFiles(glob: "target/*.${pom.packaging}")
                                        artifactPath = filesByGlob[0]?.path

                                        if (artifactPath && fileExists(artifactPath)) {
                                            echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}"
                                            nexusArtifactUploader(
                                                nexusVersion: NEXUS_VERSION,
                                                protocol: NEXUS_PROTOCOL,
                                                nexusUrl: params.NEXUS_URL,
                                                groupId: pom.groupId,
                                                version: pom.version,
                                                repository: params.NEXUS_REPOSITORY,
                                                credentialsId: NEXUS_CREDENTIALS,
                                                artifacts: [
                                                    [artifactId: pom.artifactId, classifier: '', file: artifactPath, type: pom.packaging],
                                                    [artifactId: pom.artifactId, classifier: '', file: "pom.xml", type: "pom"]
                                                ]
                                            )
                                        } else {
                                            error "*** File could not be found or does not exist."
                                        }
                                    }
                                }
                            }
                        }



        stage('Docker Build') {
            steps {
                script {
                    dir('Backend') {
                        sh "docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest ."
                    }
                }
            }
        }

        stage('Docker Push') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}'
                        sh 'docker push aichanciri/devopsback'
                    }
                }
            }
        }
    }

    post {
        always {
            sh 'docker rm -f mysql-test || true'
        }
        success {
            junit 'Backend/target/surefire-reports/*.xml'
            echo 'Build and tests succeeded!'
        }
        failure {
            echo 'Build or test failed.'
        }
    }
}
